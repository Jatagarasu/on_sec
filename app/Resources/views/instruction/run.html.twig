{% extends "::base.html.twig" %}
{% block title %}Instruction{% endblock %}
{% block ownStylesheets %}
    <link rel="stylesheet" href="{{ asset('bundles/hsdonsec/css/Instruction.css') }}">
{% endblock %}
{% block content %}

    <div class="container">

        <div id="instructionView">
            <h1 class="headerInstruction">Unterweisung {{ instruction.description }} durchführen</h1>
            <div class="progress">
                <div id="progBar1" style="width:0%" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" >
                    <div id="progBarInstruction">
                        <span id="page_num"></span> / <span id="page_count"></span>
                    </div>

                </div>
            </div>
            </br>

            <script src="//mozilla.github.io/pdf.js/build/pdf.js"></script>

            <div align="center">
                <canvas id="the-canvas"></canvas>
            </div>

            <div class="row justify-content-end">
                <div class="col-lg-4">
                    <div class="btn-group pull-right">
                        <button id="prev" type="button" class="btn btn-primary btn-lg disabled" >zurück</button>
                        <button id="next" type="button" class="btn btn-primary btn-lg">vor</button>
                        <a id="quiz" type="button" href="{{ path('instruction_runQuestions', {'id': instruction.id }) }}" class="btn btn-primary btn-lg disabled">zum Quiz</a>
                    </div>
                </div>
            </div>


            {# instruction.pdfLink #}

        </div>
    </div>

    <script>
        // If absolute URL from the remote server is provided, configure the CORS
        // header on that server.

        var url = "{{ asset('bundles/hsdonsec/pdf/leiter.pdf') }}"; //'//cdn.mozilla.net/pdfjs/tracemonkey.pdf';{# instruction.getPdfPath() #}
        console.log(url);
        // The workerSrc property shall be specified.
        PDFJS.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';

        var pdfDoc = null,
            pageNum = 1,
            pageRendering = false,
            pageNumPending = null,
            scale = 0.8,
            canvas = document.getElementById('the-canvas'),
            ctx = canvas.getContext('2d');

        /**
         * Get page info from document, resize canvas accordingly, and render page.
         * @param num Page number.
         */
        function renderPage(num) {
            pageRendering = true;
            // Using promise to fetch the page
            pdfDoc.getPage(num).then(function(page) {
                var viewport = page.getViewport(scale);
                canvas.height = viewport.height;
                canvas.width = viewport.width;

                // Render PDF page into canvas context
                var renderContext = {
                    canvasContext: ctx,
                    viewport: viewport
                };
                var renderTask = page.render(renderContext);

                // Wait for rendering to finish
                renderTask.promise.then(function() {
                    pageRendering = false;
                    if (pageNumPending !== null) {
                        // New page rendering is pending
                        renderPage(pageNumPending);
                        pageNumPending = null;
                    }
                });
            });

            // Update page counters
            document.getElementById('page_num').textContent = pageNum;

            $('#progBar1').css('width',pageNum/pdfDoc.numPages*100 + '%');

            if(pageNum > 1)
            {
                $('#prev').addClass('active').removeClass('disabled');
            }
            else
            {
                $('#prev').addClass('disabled').removeClass('active');
            }

            if(pageNum === pdfDoc.numPages)
            {
                $('#next').addClass('disabled').removeClass('active');
                $('#quiz').addClass('active').removeClass('disabled');
            }
            else
            {
                $('#next').addClass('active').removeClass('disabled');
            }
        }


        /**
         * If another page rendering in progress, waits until the rendering is
         * finised. Otherwise, executes rendering immediately.
         */
        function queueRenderPage(num) {
            if (pageRendering) {
                pageNumPending = num;
            } else {
                renderPage(num);
            }
        }

        /**
         * Displays previous page.
         */
        function onPrevPage() {
            if (pageNum <= 1) {
                return;
            }
            pageNum--;
            queueRenderPage(pageNum);
        }
        document.getElementById('prev').addEventListener('click', onPrevPage);
        /**
         * Displays next page.
         */
        function onNextPage() {
            if (pageNum >= pdfDoc.numPages) {
                return;
            }
            pageNum++;
            queueRenderPage(pageNum);
        }
        document.getElementById('next').addEventListener('click', onNextPage);

        /**
         * Asynchronously downloads PDF.
         */
        PDFJS.getDocument(url).then(function(pdfDoc_) {
            pdfDoc = pdfDoc_;
            document.getElementById('page_count').textContent = pdfDoc.numPages;

            // Initial/first page rendering
            renderPage(pageNum);
        });
    </script>


{% endblock %}
