{% extends 'base.html.twig' %}

{% block ownStylesheets %}
    <link rel="stylesheet" href="{{ asset('bundles/hsdonsec/css/Course.css') }}">
{% endblock %}

{% block content %}
{% import 'macros/keywords_input.html.twig' as keywords_input %}


    <h1>Einen neuen Kurs erstellen</h1>

    {{ form_start(form) }}

    {{ form_errors(form) }}

    <!------Name-------------->
    {{ form_row(form.description) }}

    <!------Rooms-------------->
    <div class="ui-widget search-room">
        <label for="access-rooms-input">Raumnummer: </label>
        <input id="access-room-input" class="form-control" type="text" placeholder="Raum in Form G.EE.RR" autocomplete="on">
        <!--<button type="button" class="role-button btn" id="search-for-room">Suche</button>-->
    </div>
    <br>

    <!------Instructions-------------->
    <div class="ui-widget search-instruction">
        <label for="access-rights-input">Unterweisungen hinzufügen: </label>
        <input id="access-instruction-input" class="form-control" type="text" placeholder="Name oder Schlagwort" autocomplete="on">

    </div>
    <div class="row">
        <div class="col-md-12">
            <div id="scrollbox">
            </div>
        </div>
    </div>

    {#{ form_row(form.instructions) }#}

    <!------Rights-------------->
    <div class="ui-widget add">
        <label for="access-rights-input">Rechte vergeben:</label>
        <input id="access-rights-input" class="form-control" type="text" placeholder="Name oder E-Mail" autocomplete="on">
    </div>

    <!--<div class="ui-widget" style="margin-top:2em; font-family:Arial">
        Result:
        <div id="log" style="height: 200px; width: 300px; overflow: auto;" class="ui-widget-content"></div>
    </div>-->


    <table class="table" id="rights-table">
        <thead class="thead-inverse tablehead">
        <tr>
            <th>Name</th>
            <th>Rang</th>
        </tr>
        </thead>

        <tbody id="tablebody" class="tablebody">
        <tr>
            <td>{#{app.user.getFirstname()}{app.user.getSurname()#} Eigentümer LogIn</td> {#{ form_row(form.owner) }#}
            <td>
                Eigentümer
            </td>
        </tr>

        <!--
        <tr id="moderator-rows-list"
            data-prototype="{##}{form_widget(form.moderators.vars.prototype)|e}}"
            class="moderator-list">
            <!--{##}% for moderator in form.moderators %}
                <td>
                    {##}{ form_errors(moderator) }}
                    {##}{ form_widget(moderator) }}
                </td>
                <td>
                    Bearbeiter
                </td>
            {##}% endfor %}-->
        <!--</tr>-->
        </tbody>
    </table>

    <!-------Keywords---------------------->
    <label for="access-keywords-input">Schlagwörter: </label>
    {{ keywords_input.keywords_input(form) }}
    <br>

    <!-------Navigation---------------------->
    <input id="submit_button" type="submit" value="Abbrechen" class="btn" />
    <input type="submit" value="Erstellen" class="btn" />

    {#onClick="window.location.href='{{ path('course_index') }}'"#}

    {{ form_end(form) }}


     <!--<a href="]{#{{ path('course_index') }}#}">Zurück zu der Kursübersicht</a>-->



    <script>

        $(document).ready(function() {
            /*function log( message ) {
                $( "<div>" ).text( message ).prependTo( "#log" );
                $( "#log" ).scrollTop( 0 );
            }*/

            $("#submit_button").onclick = function(){

                var inputText = $('#access-room-input').val();
                var $hidden   = $('<input type="hidden"/>');
                $hidden.attr('name',"roomNumber");
                $hidden.val(inputText);
                $('#submit_button').append($hiddenElement);


                window.location.href='{{ path('course_index') }}';
            };

            <!------Rooms-------------->
            $("#access-room-input").autocomplete({

                source: '{{ path('room_autocomplete') }}',
                minLength: 1,
                select: function( event, ui ) {
                    console.log( ui.item ?
                        "Selected: " + ui.item.value + " aka " + ui.item.id :
                        "Nothing selected, input was " + this.value );
                }
            });

            <!------Instructions-------------->
            $("#access-instruction-input").autocomplete({

                source: '{{ path('instruction_autocomplete') }}',
                minLength: 2,
                select: function( event, ui ) {
                    console.log(ui);
                    console.log( ui.item ?
                        "Selected: " + ui.item.value + " aka " + ui.item.id :
                        "Nothing selected, input was " + this.value );

                    var scrollbox = document.getElementById('scrollbox');
                    var newElement = document.createElement('div');
                    newElement.className = 'instruction_element';
                    newElement.setAttribute('id','new_id_for_new_element');
                    newElement.innerHTML = ui.item.value;

                    var $hiddenElement   = $('<input type="hidden"/>');
                    $hiddenElement.attr('name',"instructionId[]");
                    $hiddenElement.val(ui.item.id);

                    var newButton = document.createElement('button');
                    newButton.className = 'instruction_button role-button btn';
                    newButton.setAttribute('id','new_id_for_new_button');
                    newButton.innerHTML = '-';

                    newElement.appendChild(newButton);
                    $('#scrollbox').append($hiddenElement);

                    scrollbox.appendChild(newElement);
                }
            });

            <!------Moderators-------------->
            console.log('{{ path('moderator_autocomplete') }}');
            $("#access-rights-input").autocomplete({

                source: '{{ path('moderator_autocomplete') }}',
                minLength: 2,
                select: function( event, ui ) {
                    console.log( ui.item);
                    console.log( ui.item ?
                        "Selected: " + ui.item.value + " aka " + ui.item.id :
                        "Nothing selected, input was " + this.value );

                    var tablebody = document.getElementById('tablebody');
                    var newElement = document.createElement('tr');
                    newElement.className = 'moderator_row';
                    newElement.setAttribute('id','new_id_for_new_row');


                    var newModerator = document.createElement('td');
                    newModerator.setAttribute('id','new_id_for_new_collumn');
                    newModerator.innerHTML = ui.item.value;

                    var $newHiddenElement   = $('<input type="hidden"/>');
                    $newHiddenElement.attr('name',"moderatorId[]");
                    $newHiddenElement.val(ui.item.id);


                    var newModeratorTitle = document.createElement('td');
                    newModeratorTitle.innerHTML = 'Bearbeiter';


                    newElement.appendChild(newModerator);
                    $('#rights-table').append($newHiddenElement);
                    newElement.appendChild(newModeratorTitle);
                    tablebody.appendChild(newElement);
                }

            });







            // keep track of how many rows with moderators have been rendered

            var moderatorCount = '{{form.moderators|length}}'

            $('#add-another-moderator').click(function(e)
            {
                console.log('click');
                console.log('{{ form.moderators|length }}');
                e.preventDefault();

                //var user = User();

                var moderatorList = $('#moderator-rows-list');

                //grab the prototype template
                var newWidget = moderatorList.attr('data-prototype');

                // replace the "__name__" used in the id and name of the prototype
                // with a number that's unique to your keywords
                // end name attribute looks like name="contact[keywords][2]"
                newWidget = newWidget.replace(/__name__/g, moderatorCount);
                moderatorCount++;

                // create a new row and add it to the table
                var newColumn1 = $('<td></td>')
                    .addClass('moderator-input')
                    .html(newWidget);
                var newColumn2 = $('<td>Bearbeiter</td>');

                var newRow= $('<tr></tr>');
                newRow.appendChild(newColumn1);
                newRow.appendChild(newColumn2);

                newRow.appendTo(moderatorList);
            });


        });

    </script>

    {#{ form_row(form.room) }}
     <button type="button" class="btn" id="add-another-room">Raum hinzufügen</button>

     <!------Rooms-------------->
     <ul>
         {% for room in rooms %}
             <li> {{ room.getDescription|e}} </li>
         {% else %}
             <div>Keine Räume</div>
         {% endfor %#}
    <!--        </ul>
            <!------/Rooms-------------->

{% endblock %}


