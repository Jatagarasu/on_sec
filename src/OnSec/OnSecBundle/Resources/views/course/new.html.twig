{% extends 'HSDOnSecBundle::base.html.twig' %}

{% block ownStylesheets %}
    <link rel="stylesheet" href="{{ asset('bundles/hsdonsec/css/Course.css') }}">
{% endblock %}

{% block content %}
{% import 'macros/keywords_input.html.twig' as keywords_input %}


    <h1>Einen neuen Kurs erstellen</h1>

    {{ form_start(form) }}

    {{ form_errors(form) }}

    <!------Name-------------->
    {{ form_row(form.description) }}
    <br>

    <!------Rooms-------------->
    <!--
    <div class="ui-widget search-room" id="room-element">
        <label for="access-rooms-input">Raumnummer: </label>
        <input id="access-room-input" class="form-control" type="text" placeholder="Raum in Form G.EE.RR" autocomplete="on">
        <!--<button type="button" class="role-button btn" id="search-for-room">Suche</button>-->
    <!--</div>
    <br>-->

    <!------Instructions-------------->
    <div class="ui-widget search-instruction">
        <label for="access-rights-input">Unterweisungen hinzufügen: </label>
        <input id="access-instruction-input" class="form-control" type="text" placeholder="Name, Raum oder Schlagwort" autocomplete="on">

    </div>
    <div class="row">
        <div class="col-md-12">
            <div id="scrollbox">
            </div>
        </div>
    </div>
    <br>

    <!------Rights-------------->
    <div class="ui-widget add">
        <label for="access-rights-input">Rechte vergeben:</label>
        <input id="access-rights-input" class="form-control" type="text" placeholder="Name oder E-Mail" autocomplete="on">
    </div>

    <table class="table" id="rights-table">
        <thead class="thead-inverse tablehead">
            <tr>
                <th>Name</th>
                <th>Rolle</th>
            </tr>
        </thead>

        <tbody id="tablebody" class="tablebody">
            <tr>
                <td>{{ '%s %s'|format(app.user.firstname,app.user.surname) }}</td> {#{ form_row(form.owner) }#}
                <td>
                    Eigentümer
                </td>
            </tr>
        </tbody>
    </table>

    <br></br>

    <!-------Keywords---------------------->
    <!--<label for="access-keywords-input">Schlagwörter: </label>-->
    {{ keywords_input.keywords_input(form) }}
    <br>

    <!-------Navigation---------------------->
    <input id="submit_button" type="submit" value="Abbrechen" class="btn" />
    <input type="submit" value="Erstellen" class="btn" />
    <br></br>

    {#onClick="window.location.href='{{ path('course_index') }}'"#}

    {{ form_end(form) }}


     <!--<a href="]{#{{ path('course_index') }}#}">Zurück zu der Kursübersicht</a>-->



    <script>

        $(document).ready(function() {

            $("#submit_button").onclick = function(){

                window.location.href='{{ path('course_index') }}';
            };

            <!------Rooms-------------->
            /*$("#access-room-input").autocomplete({

                source: '{#{ path('room_autocomplete') }#}',
                minLength: 1,
                select: function( event, ui ) {
                    console.log( ui.item ?
                        "Selected: " + ui.item.value + " aka " + ui.item.id :
                        "Nothing selected, input was " + this.value );

                        var scrollbox = document.getElementById('scrollbox');

                        var instructions = ui.item.instructions;

                        var $hiddenRoom = $('<input type="hidden"/>');
                        $hiddenRoom.attr('name',"roomId[]");
                        $hiddenRoom.val(ui.item.id);

                        $('#room-element').append($hiddenRoom);


                    console.log(ui.item.id);

                        console.log(instructions);

                        for (var i = 0; i < instructions.length; i++){
                            var instruction = instructions[i];

                            var newElement = document.createElement('div');
                            newElement.className = 'instruction_element';
                            newElement.setAttribute('id','new_id_for_new_element');
                            newElement.innerHTML = '<p class="instruction_title col-md-8">'+ instruction.value +'</p><button type="button" class="delete_instruction_button role-button btn btn-sm col-md-4" id="delete_instruction_button">X</button>';

                            //newElement.style.height = $("#new_id_for_new_element").height();

                            var $hiddenElement   = $('<input type="hidden"/>');
                            $hiddenElement.attr('name',"instructionId[]");
                            $hiddenElement.val(instruction.id);


                            //newElement.appendChild(newButton);
                            $('#scrollbox').append($hiddenElement);

                            scrollbox.appendChild(newElement);

                        }


                }
            });*/

            <!------Instructions-------------->
            $("#access-instruction-input").autocomplete({

                source: '{{ path('instruction_autocomplete') }}',
                minLength: 2,
                select: function( event, ui ) {
                    console.log(ui);
                    console.log( ui.item ?
                        "Selected: " + ui.item.value + " aka " + ui.item.id :
                        "Nothing selected, input was " + this.value );

                    var scrollbox = $('#scrollbox');

                    var newElement = $('<div>');
                    newElement.addClass('instruction_element');
                    newElement.attr('id','instruction_id_'+ui.item.id);
                    newElement.html('<p class="instruction_title col-md-8">'+ ui.item.value +'</p>');

                    var $hiddenElement   = $('<input type="hidden"/>');
                    $hiddenElement.attr('name',"instructionId[]");
                    $hiddenElement.val(ui.item.id);
                    $hiddenElement.attr('id','hidden_id_'+ui.item.id);

                    scrollbox.append($hiddenElement);

                    var removeBtn = $('<a href="#" class="delete_instruction_button role-button btn btn-sm col-md-4">X</a>');
                    removeBtn.click(function() {
                        $('#instruction_id_' + ui.item.id).remove();
                        $('#hidden_id_' + ui.item.id).remove();
                    });

                    newElement.append(removeBtn);
                    scrollbox.append(newElement);
                }
            });

            <!------Moderators-------------->
            console.log('{{ path('moderator_autocomplete') }}');
            $("#access-rights-input").autocomplete({

                source: '{{ path('moderator_autocomplete') }}',
                minLength: 2,
                select: function( event, ui ) {
                    console.log( ui.item);
                    console.log( ui.item ?
                        "Selected: " + ui.item.value + " aka " + ui.item.id :
                        "Nothing selected, input was " + this.value );

                    //var tablebody = document.getElementById('tablebody');

                    var tablebody = $('#tablebody');


                    var newElement = $('<tr>');
                    newElement.addClass('moderator_row');
                    newElement.attr('id','moderator_id_'+ui.item.id);
                    newElement.html('<td>'+ ui.item.value +'</td><td>Bearbeiter</td>');

                    var $hiddenElement   = $('<input type="hidden"/>');
                    $hiddenElement.attr('name',"moderatorId[]");
                    $hiddenElement.val(ui.item.id);
                    $hiddenElement.attr('id','hidden_id_'+ui.item.id);

                    tablebody.append($hiddenElement);

                    var removeBtn = $('<a href="#" class="delete_moderator">X</a>');
                    removeBtn.click(function() {
                        $('#moderator_id_' + ui.item.id).remove();
                        $('#hidden_id_' + ui.item.id).remove();
                    });

                    newElement.append(removeBtn);
                    tablebody.append(newElement);


                    //var newElement = document.createElement('tr');
                    //newElement.className = 'moderator_row';
                    //newElement.setAttribute('id','new_id_for_new_row');


                    //var newModerator = document.createElement('td');
                    //newModerator.setAttribute('id','new_id_for_new_collumn');
                    //newModerator.innerHTML = ui.item.value;

                    //var $newHiddenElement   = $('<input type="hidden"/>');
                    //$newHiddenElement.attr('name',"moderatorId[]");
                    //$newHiddenElement.val(ui.item.id);

                    //var newModeratorTitle = document.createElement('td');
                    //newModeratorTitle.innerHTML = 'Bearbeiter';


                    newElement.appendChild(newModerator);
                    $('#rights-table').append($newHiddenElement);
                    newElement.appendChild(newModeratorTitle);
                    tablebody.appendChild(newElement);
                }

            });







            // keep track of how many rows with moderators have been rendered
            {#
            var moderatorCount = '{{form.moderators|length}}'

            $('#add-another-moderator').click(function(e)
            {
                console.log('click');
                console.log('{{ form.moderators|length }}');
                e.preventDefault();

                //var user = User();

                var moderatorList = $('#moderator-rows-list');

                //grab the prototype template
                var newWidget = moderatorList.attr('data-prototype');

                // replace the "__name__" used in the id and name of the prototype
                // with a number that's unique to your keywords
                // end name attribute looks like name="contact[keywords][2]"
                newWidget = newWidget.replace(/__name__/g, moderatorCount);
                moderatorCount++;

                // create a new row and add it to the table
                var newColumn1 = $('<td></td>')
                    .addClass('moderator-input')
                    .html(newWidget);
                var newColumn2 = $('<td>Bearbeiter</td>');

                var newRow= $('<tr></tr>');
                newRow.appendChild(newColumn1);
                newRow.appendChild(newColumn2);

                newRow.appendTo(moderatorList);
            });
#}

        });

    </script>

    {#{ form_row(form.room) }}
     <button type="button" class="btn" id="add-another-room">Raum hinzufügen</button>

     <!------Rooms-------------->
     <ul>
         {% for room in rooms %}
             <li> {{ room.getDescription|e}} </li>
         {% else %}
             <div>Keine Räume</div>
         {% endfor %#}
    <!--        </ul>
            <!------/Rooms-------------->

{% endblock %}


